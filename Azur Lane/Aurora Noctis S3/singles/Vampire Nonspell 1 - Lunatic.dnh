#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["AL Aurora Noctis S3 - Vampire Nonspell - Lunatic"]
#Text["Azur Lane - Aurora Noctis[r]Stage 3 Miniboss"]
#BGM["./music/Illusionary White Traveller.ogg"]
#Background["script/default_system/Default_Background_IceMountain.txt"]
#include "script/Skip Scripts/common/AllStarShot/AllStarShot_Const.dnh"
#include "script/Skip Scripts/common/libraries/skip_general_lib.dnh"

let objBoss;

@Event{
	alternative(GetEventType())
	case(EV_REQUEST_LIFE){ SetScriptResult(2700); }
    case(EV_REQUEST_TIMER){ SetScriptResult(21); }
    case(EV_REQUEST_SPELL_SCORE){ SetScriptResult(200000); }
}

@Initialize{
	objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objBoss);
	SetCommonData("bossActive", 1);
	
	ObjMove_SetDestAtFrame(objBoss, GetCenterX(), GetCenterY - 170, 45);
    TDrawLoop; 
    TFinalize;
    MainTask;
}

@MainLoop{
	ObjEnemy_SetIntersectionCircleToShot(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 32);
	ObjEnemy_SetIntersectionCircleToPlayer(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 24);
	
	yield;
}

task TDrawLoop {
	let imgBoss = GetCurrentScriptDirectory() ~ "../images/VampireChibi.png";
	ObjPrim_SetTexture(objBoss, imgBoss);
	ObjSprite2D_SetSourceRect(objBoss, 1, 1, 69, 73); 			
	ObjSprite2D_SetDestCenter(objBoss);
}

task MainTask {		// movement offset from shoot by 60 frames
	wait(60);
	movement;
	wait(60);
	shoot;
}

task TFinalize {
	while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) { yield; }
	SetAutoDeleteObject(true);
	killBossPhase(objBoss);
	wait(120);
	CloseScript(GetOwnScriptID());
}



task movement {		// total 600 frames
	while(!Obj_IsDeleted(objBoss)) {		// 240 frames wait, 300 frames each cycle
	ObjMove_SetDestAtFrame(objBoss, GetCenterX() - 110, GetCenterY(), 60);
	wait(240);
	ObjMove_SetDestAtFrame(objBoss, GetCenterX() + 110, GetCenterY(), 60);
	wait(240);
	}
}

task shoot {	// 4 waves while still, 4 waves while moving, repeat after 240 frames
	while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
		purpleShots;
		wait(60);
		redCross;
		wait(120);
		purpleShots;
		wait(60);
	}
}

task purpleShots {
	ascent(i in 0..6) {
		if(ObjEnemy_GetInfo(objBoss, INFO_LIFE) <= 0) { return; }
		let angDist = 25;
		let angleT = GetAngleToPlayer(objBoss) - 3*angDist;
		PlaySound("Atk3", 40, 0);
		
		ascent(j in 0..7) {
			let angleB = angleT + j*angDist;
			let obj = CreateShotA2(ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 
			4, angleB - 11, -0.1, 0, 285, 0);
			let obj2 = CreateShotA2(ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 
			4, angleB + 11, -0.1, 0, 285, 0);

			purpleShotMov(obj, j*angDist - 3*angDist, 1.5 + i*0.75);
			purpleShotMov(obj2, j*angDist - 3*angDist, 1.5 + i*0.75);
		}
		wait(5);
	}	
}

task purpleShotMov(obj, angleOffset, maxSpeed) {
	ObjMove_AddPatternA4(obj, 50, 0, angleOffset, +0.15, 0, maxSpeed, GetPlayerObjectID, NO_CHANGE);

}

task redCross {
	loop(2) {
		redLine(24, 0);
		redLine(-24, 0);
		redLine(0, 18);
		redLine(0, -18);
		wait(130);
	}
}

task redLine(xMov, yMov) {
	let bossX = ObjMove_GetX(objBoss);
	let bossY = ObjMove_GetY(objBoss);
	
	ascent(i in 0..15) {
		if(ObjEnemy_GetInfo(objBoss, INFO_LIFE) <= 0) { return; }
		PlaySound("Twinkle1", 50, 15);
		let angleT = 0;
		ascent(j in 0..4) {
			CreateShotA1(bossX + i*xMov, bossY + i*yMov, 3, angleT + j*360/4, 83, 15);
		}
		wait(8);
	}
}


